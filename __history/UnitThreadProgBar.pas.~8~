unit UnitThreadProgBar;

interface

uses
  System.Classes, Vcl.Forms;

type
  ThreadProgressBar = class(TThread)
  private
    { Private declarations }
  protected
    procedure Execute; override;
  end;

var
    ThPrBar: ThreadProgressBar;

implementation

uses UnitMain, UnitLogin;



{ 
  Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);  

  and UpdateCaption could look like,

    procedure ThreadProgressBar.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; 
    
    or 
    
    Synchronize( 
      procedure 
      begin
        Form1.Caption := 'Updated in thread via an anonymous method' 
      end
      )
    );
    
  where an anonymous method is passed.
  
  Similarly, the developer can call the Queue method with similar parameters as 
  above, instead passing another TThread class as the first parameter, putting
  the calling thread in a queue with the other thread.
    
}

{ ThreadProgressBar }

procedure ThreadProgressBar.Execute;
begin
  { Place thread code here }
  {if not Assigned(FormLoadProgBar) then
      FormLoadProgBar := TFormLoadProgBar.Create(nil);
    FormLoadProgBar.ShowModal;}
   TestUpdate();
end;

end.
